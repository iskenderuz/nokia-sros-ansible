- name: Prepare compute host
  block:
  - name: enable ip forwarding
    command: "sysctl -w net.ipv4.ip_forward=1"

  - name: install guestfish
    yum: 
      name:
        - guestfish
      state: present

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: yes

- block:
  - name: Check if there is an existing qcow image
    stat:
      path: "{{ images_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2"
    register: imageResult

  - name: list all VMs
    virt:
      command: list_vms
    register: all_vms

  - name: list running VMs
    virt:
      command: list_vms
      state: running
    register: running_vms

  - name: list networks
    virt_net:
      command: list_nets
    register: all_nets

  - block:
    - name: Creating directory for VM
      file:
        dest: '{{ images_path }}/{{ inventory_hostname }}'
        state: directory

    - name: Setting up vSIM temporary configuration files
      template: src={{ item }}.j2 dest={{ images_path }}/{{ inventory_hostname }}/{{ item }}
      with_items:
        - bof.cfg
        - config.cfg

    - name: Copying VM image
      copy:
        src: '{{ image_dir }}/sros-vm.qcow2'
        dest: '{{ images_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2' 
     
    - name: Copying license file
      copy:
        src: '{{ image_dir }}/license.txt'
        dest: '{{ images_path }}/{{ inventory_hostname }}/license.txt'

    - name: Copying temporary configuration files into vSIM image
      command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2 -m /dev/sda1 copy-in {{ images_path }}/{{ inventory_hostname }}/{{ item }} /
      with_items:
        - bof.cfg
        - config.cfg
        - license.txt

    - name: Removing temporary configuration files
      file: path={{ images_path }}/{{ inventory_hostname }}/{{ item }} state=absent
      with_items:
        - bof.cfg
        - config.cfg
        - license.txt

    when: imageResult.stat.exists == False
    ignore_errors: yes

  - block:
    - name: Define libvirt networks
      virt_net:
        command: define
        xml: "{{ lookup('template', 'libvirt_networks.xml.j2') }}"
        name: "{{ item }}"
        autostart: yes
      with_items:
        - "{{ libvirt_networks }}"

    - name: Start libvirt networks
      virt_net:
        command: start
        name: "{{ item }}"
      with_items:
        - "{{ libvirt_networks }}"

#    - name: Set vsim_mgmt IP address for the host
#      command: "brctl addbr {{ item }}"
#      with_items:
#        - "{{ libvirt_networks }}"

    - name: Set vsim_mgmt IP address for the host
      command: "ifconfig vsim_mgmt {{ vsim_mgmt }} up"

    - name: Define VM
      virt: name={{ inventory_hostname }}
            command=define
            xml="{{ lookup('template', 'vsim.xml.j2') }}"
            uri=qemu:///system
      when: inventory_hostname not in all_vms.list_vms

    - name: Autostart
      virt: name={{ inventory_hostname }}
            command=status
            autostart=True
            uri=qemu:///system

    - name: Run VM
      virt: name={{ inventory_hostname }}
            state=running
            uri=qemu:///system
      when: inventory_hostname not in running_vms.list_vms

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: yes
  ignore_errors: yes

- name: Wait 300 seconds for port 22 to become open
  wait_for:
    port: 22
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
  connection: local

- name: Copying SROS YANG modules to vsim
  command: "sshpass -p {{ ansible_ssh_pass }} scp -r -v -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ yang_dir }}/YANG {{ ansible_ssh_user }}@{{ ansible_host }}:/"
  delegate_to: localhost

